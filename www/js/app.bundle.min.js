function appRun(t){t.ready(function(){window.cordova&&window.cordova.plugins&&window.cordova.plugins.Keyboard&&(cordova.plugins.Keyboard.hideKeyboardAccessoryBar(!0),cordova.plugins.Keyboard.disableScroll(!0)),window.StatusBar&&StatusBar.styleDefault()})}function config(t,e){t.state("tab",{url:"/tab","abstract":!0,templateUrl:"templates/tabs.html"}).state("tab.tasks",{url:"/tasks",views:{"tab-tasks":{templateUrl:"templates/tab-tasks.html",controller:"TasksController"}}}).state("tab.task-detail",{url:"/tasks/:taskName",views:{"tab-tasks":{templateUrl:"templates/task-detail.html",controller:"DetailController"}}}).state("tab.qr",{url:"/qr",views:{"tab-qr":{templateUrl:"templates/tab-qr.html",controller:"QRController"}}}).state("tab.logout",{url:"/logout",views:{"tab-logout":{templateUrl:"templates/tab-logout.html",controller:"LogoutController"}}}).state("login",{url:"/login",templateUrl:"templates/login.html",controller:"LoginController"}),e.otherwise("/login")}function BaasBoxService(t,e){var o=e.BASE_URL,r=e.APPCODE,a=function(){return{headers:{"X-BB-SESSION":localStorage.getItem("BaasBoxToken"),"X-BAASBOX-APPCODE":r,"Content-type":"application/json"}}};this.login=function(e,a){var n=o+"/login";return t.post(n,{username:e,password:a,appcode:r})},this.getTasks=function(){var e=o+"/document/Master";return t.get(e,a())},this.logout=function(){var e=o+"/logout";return t.post(e,{},a())},this.toggleTask=function(e){var r=e.id,n=o+"/document/Master/"+r+"/.enabled",l={data:e.enabled};return t.put(n,l,a())},this.toggleTaskSDN=function(e){var r=o+"/plugin/instapp.toggle",n=e;return t.put(r,n,a())},this.setToken=function(t){localStorage.setItem("BaasBoxToken",t)}}function ErrorService(t,e){this.handleError=function(o){var r=o.status;switch(r){case-1:e.alert({title:t.SERVER_NOT_FOUND});break;case 400:e.alert({title:t.BAD_REQUEST});break;case 401:e.alert({title:t.UNAUTHORIZED});break;default:e.alert({title:t.DEFAULT})}}}function LoginController(t,e,o,r,a,n){e.data={},e.login=function(){r.login(e.data.username,e.data.password).then(function(t){token=t.data.data["X-BB-SESSION"],r.setToken(token),o.go("tab.tasks")},function(t){a.handleError(t)})}}function LogoutController(t,e,o,r,a){e.logout=function(){r.logout().then(function(t){localStorage.removeItem("BaasBoxToken"),o.go("login")},function(t){a.handleError(t)})}}function DetailController(t,e,o,r,a,n){e.$on("$ionicView.beforeEnter",function(){e.task=n.getTask(o.taskName)}),e.toggle=function(e){r.toggleTaskSDN(e).then(function(e){t.alert({title:e.data.result})},function(t){a.handleError(t)})}}function TasksController(t,e,o,r,a){t.tasks=a.get(),t.$on("$ionicView.beforeEnter",function(e,o){t.update()}),t.update=function(){o.getTasks().then(function(e){t.tasks=e.data.data,a.set(t.tasks)},function(t){r.handleError(t)})["finally"](function(){t.$broadcast("scroll.refreshComplete")})}}function TasksService(){var t={};return{set:function(e){t=e},get:function(){return t},getTask:function(e){for(i=0;i<t.length;i++)if(t[i].mac===e)return t[i]}}}function QRController(t,e,o,r,a){o.$on("$ionicView.beforeEnter",function(t,e){o.scanBarcode()}),o.scanBarcodeMock=function(){var t={text:"00-00-00-00-00-02",format:"QR_CODE"};"QR_CODE"===t.format&&a.getTask(t.text)?r.go("tab.task-detail",{taskName:t.text}):e.alert({title:"No task found with this address."})},o.scanBarcode=function(){t.scan().then(function(t){"QR_CODE"===t.format&&a.getTask(t.text)?r.go("tab.task-detail",{taskName:t.text}):e.alert({title:"No task found with this address."})},function(t){e.alert({title:t})})}}angular.module("instapp",["ionic","ngCordova","instapp.detailController","instapp.loginController","instapp.logoutController","instapp.tasksController","instapp.qrController","instapp.baasBoxService","instapp.errorService"]).run(appRun),appRun.$inject=["$ionicPlatform"],angular.module("instapp").config(config),config.$inject=["$stateProvider","$urlRouterProvider"],angular.module("instapp.baasBoxService",[]).service("BaasBoxService",BaasBoxService),BaasBoxService.$inject=["$http","SERVER_CONFIG"],angular.module("instapp.baasBoxService").constant("SERVER_CONFIG",{BASE_URL:"http://82.196.14.4:9000",APPCODE:"1234567890"}),angular.module("instapp.errorService",[]).service("ErrorService",ErrorService),ErrorService.$inject=["errMsg","$ionicPopup"],angular.module("instapp.errorService").constant("errMsg",{DEFAULT:"Something went wrong. Sorry :(",SERVER_NOT_FOUND:"Unable to connect to server.",BAD_REQUEST:"400: Check your username and password.",UNAUTHORIZED:"401: Unathorized. Please sign in first."}),angular.module("instapp.loginController",[]).controller("LoginController",LoginController),LoginController.$inject=["$ionicPopup","$scope","$state","BaasBoxService","ErrorService","TasksService"],angular.module("instapp.logoutController",[]).controller("LogoutController",LogoutController),LogoutController.$inject=["$ionicPopup","$scope","$state","BaasBoxService","ErrorService"],angular.module("instapp.detailController",["instapp.tasksService"]).controller("DetailController",DetailController),DetailController.$inject=["$ionicPopup","$scope","$stateParams","BaasBoxService","ErrorService","TasksService"],angular.module("instapp.tasksController",["instapp.tasksService"]).controller("TasksController",TasksController),TasksController.$inject=["$scope","$ionicPopup","BaasBoxService","ErrorService","TasksService"],angular.module("instapp.tasksService",[]).factory("TasksService",TasksService),angular.module("instapp.qrController",["instapp.tasksService"]).controller("QRController",QRController),QRController.$inject=["$cordovaBarcodeScanner","$ionicPopup","$scope","$state","TasksService"];